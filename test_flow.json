[
    {
        "id": "21ef1ae50a97d1a7",
        "type": "tab",
        "label": "Ochsner Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "adda1ec79dde5723",
        "type": "ha-sensor",
        "z": "21ef1ae50a97d1a7",
        "name": "water_temperature",
        "entityConfig": "56c764b41b07f81d",
        "version": 0,
        "state": "payload.data.state",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 250,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "de764250bf3ce744",
        "type": "inject",
        "z": "21ef1ae50a97d1a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "240",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 250,
        "y": 60,
        "wires": [
            [
                "827182aede622f47"
            ]
        ]
    },
    {
        "id": "827182aede622f47",
        "type": "function",
        "z": "21ef1ae50a97d1a7",
        "name": "Parameter list",
        "func": "var msgList = [];\n\nvar commandList = {\n    \"water temperature\":\"1/2/7/121/1\"\n};\n\nvar count = Object.keys(commandList).length;\n\nfor (var i=0;i<count;i++) {\n    var firstKey = Object.keys(commandList)[i];\n    var firstValue = commandList[firstKey];\n    var outputMsg = {\n        \"commandName\": firstKey,\n        \"commandId\": firstValue\n    };\n    msgList.push({payload:outputMsg})\n}\nreturn [msgList];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "2a5bcdb6aed36c67"
            ]
        ]
    },
    {
        "id": "26204111a9c07bde",
        "type": "function",
        "z": "21ef1ae50a97d1a7",
        "name": "SOAP Params",
        "func": "msg.commandId = msg.payload.commandId;\nmsg.commandName = msg.payload.commandName;\n\nmsg.headers = {};\nmsg.headers={ \n    'Content-Type': 'text/xml'\n};\n\nmsg.payload ='<?xml version=\"1.0\" encoding=\"UTF-8\"?>'+'\\n'\nmsg.payload+='<SOAP-ENV:Envelope'+'\\n'\nmsg.payload+='xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"'+'\\n'\nmsg.payload+='xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"'+'\\n'\nmsg.payload+='xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'+'\\n'\nmsg.payload+='xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"'+'\\n'\nmsg.payload+='xmlns:ns=\"http://ws01.lom.ch/soap/\">'+'\\n'\nmsg.payload+='<SOAP-ENV:Body>'+'\\n'\nmsg.payload+='<ns:getDpRequest>'+'\\n'\nmsg.payload+='<ref>'+'\\n'\nmsg.payload+='<oid>'+msg.commandId+'</oid>'+'\\n'\nmsg.payload+='<prop/>'+'\\n'\nmsg.payload+='</ref>'+'\\n'\nmsg.payload+='<startIndex>0</startIndex>'+'\\n'\nmsg.payload+='<count>20</count>'+'\\n'\nmsg.payload+='</ns:getDpRequest>'+'\\n'\nmsg.payload+='</SOAP-ENV:Body>'+'\\n';\nmsg.payload+='</SOAP-ENV:Envelope>'+'\\n';\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "78dc706d803d3c1a"
            ]
        ]
    },
    {
        "id": "78dc706d803d3c1a",
        "type": "http request",
        "z": "21ef1ae50a97d1a7",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.188.50/ws",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 300,
        "wires": [
            [
                "93fc9f62d9ed586c"
            ]
        ]
    },
    {
        "id": "93fc9f62d9ed586c",
        "type": "xml",
        "z": "21ef1ae50a97d1a7",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "3cdf6ba2fa8d0d84"
            ]
        ]
    },
    {
        "id": "3cdf6ba2fa8d0d84",
        "type": "function",
        "z": "21ef1ae50a97d1a7",
        "name": "Extract value",
        "func": "var payload=msg.payload;\nvar commandName=msg.commandName;\n\nvar NewMsg={};\nNewMsg.payload = {\n    data: {\n        state : Number(payload[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"][0][\"ns:getDpResponse\"][0].dpCfg[0].value[0])\n    }\n};\n\nreturn NewMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 420,
        "wires": [
            [
                "adda1ec79dde5723"
            ]
        ]
    },
    {
        "id": "2a5bcdb6aed36c67",
        "type": "delay",
        "z": "21ef1ae50a97d1a7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "26204111a9c07bde"
            ]
        ]
    },
    {
        "id": "56c764b41b07f81d",
        "type": "ha-entity-config",
        "server": "d20eed2c.b5b69",
        "deviceConfig": "",
        "name": "WaterTemperatur",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "WaterTemperatur"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": "diagnostic"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "temperature"
            },
            {
                "property": "unit_of_measurement",
                "value": "Â°C"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "d20eed2c.b5b69",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    }
]